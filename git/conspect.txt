для работы в консоли windows необходимо установить git bush
- gitk																						- запустить GUI коммитов (на linux необходимо предварительно установить)
- git checkout №cache																	- вернет состояния проекта к коммиту по номеру кэша из git log
- git checkout name_of_branch															- перейти на ветку ( возращает состояние проекта на конечную точку коммита по названию ветки)
- git reset	HEAD text.txt																- вернут text.txt к последней версии сохраненного коммита. (когда text.txt был проиндексирован но не закоммитен. 																										Т.е. достает файл(ы) из индекса). Вместо head можно использовать хеш. Если после использовать checkout 																												text.txt, то вернет его в прежнее состояние (последнего коммита).
- git revert HEAD --no-edit															- создает коммит, который отменяет изменения
- git revert --abort																		- отмена revert в случае конфликта


1 Начало работы с Git
	Управление версиями делятся на: локальные, централизованные, распределенные (гит)
	Файлы GIT могут находится в 3 основных состояниях: модифицированном, индексированном, зафиксированном.
		Зафиксированные файлы- сохранены в локальную бызу.
		Модифицированные файлы- файлы которые изменены, но пока не зафиксированы в БД
		Индексированное файлы- помеченные файлы на фиксацию в БД
	Git-проект в итоге имеет структуру: Рабочая папка (папка которая содержит одну из версий проекта git), Папка Git (в ней содержится БД и метаданные), область индексирования (файл который обычно находится в папке Git. Содержит информацию что войдет в следующую операцию фиксирования)
		- git version																		- проверка версии git
	Создание конфигураций
		- git config --global user.name "First_name Last_name"				- при глобальном ключе, все проекты котрые будут создаваться будут иметь данную конфигурацию. Конфигурирование создается 1 раз.
		- git config --global user.email "email"									- указать мыло
			без флага --global, производится локальное конфигурирование, которое нужно производить находясь в корневой директории git-проекта
			вся информация о конфигурации хранится в файле config. Все изменеия лучше производить с помощью команд
		- git config --global core.editor emacs									- утсановить текстовый редактор по умолчанию для работы с git (будет открываться при git commit)
		- git config --list																- вывод значений конфигурации
		- git config <key>																- вывести значение конкретного ключа в конфиге
	Получение справочной информации
		1) git help <command>
		2) git <command> --help
		3) man git-<command>

2 Основы GIT
	Для создания проекта Git есть 2 пути: 1) Можно взять существующий проект или папку и импортировать в Git. 2) клонировать существующий репозиторий из другого проекта
	
	- git init																				- в указанной директории инициализирует git, создавая проект git
	- git clone https://github.com/libgit2/libgit2 [folder]					- получение копии существующего репозитория (в данном примере скопирует библиотеку libgit2), можно указать папку(путь) куда произвести копию. Могут использоваться разные транспортные протоколы	
	
	- git add <file.txt || *.c>														- индексирует(начинает отслеживать файл, если он не ослеживаемый и добавляет как кандидат на фиксацию). Можно применить к файлу по имени, ко всем файлам в данной директории- '.', ко всем файлам (не только в данной директории- '*' но это не точно). Так-же помечает файлы с конфдиктом как разрешенные.
	- git add LICENSE																		-
	
	- git commit																			- откроет текстовый редактор указанный в конфигурации для описания комита и при закрытии редоактора, еси он не пуст фиксируются файлы (создается комит)
		-v																						- с этим флагом в редактор будут добавленны иземенения в файлах
	- git commit -m "Enter your commit"												- ввести текстовый коментарий изменения "commit"
	- git commit -a																		- автоматически проиндексирует все отслеживаемые файлы и зафиксирует их. Пример git commit -m "message" -a
	Каждый файл может пребывать в 2 состояних: отслеживаемый и неотслеживаемый. Отслеживаемые- это неизмененные, измененные и подготовленные к фиксации. Не отслеживаемые- все остальные.
	
	- git status																			- вывод состояния рабочего каталога. Можно применить флаг -s и --short. При короткой записи статуса у фалов будут присутствовать префиксы '??', 'A', 'M'. ??- новый непроиндексированный файл. А- новый проиндексированный, но не зафиксированный D- удаленный но не проиндксированный, M green/red- модифицированный проиндексированный/непроиндексированный
	
	игнорирование файлов
	для игнрирования отслеживания файлов обычно используется файл .gitignore с содержанием типа $ cat .gitignore *.[oa] или *~ (не отслеживать фалы кончающиеся на '.a' или '.o', все файлы заканчивающиеся на ~)	исчерпывающий список на https://github.com/github/gitignore. Используемые комбинации напоминают упрощенные регулярные выражения
	
	- git diff																				- показывает измененные строки в НЕиндексированных файлах.
		-- cached																			- покажет изменения индексированного файла
	
	- git rm 'file'																		- удаляет из области индексирования и из директории отслеживаемый но неиндексированный файл. Можно передавать файлы, папки и глобальные паттерны.
		-f																						- использовать этот флаг для принудительного удаления (если файл проиндексирован)
	- git rm --cached README															- оставит файлы в папке, но удалит из индексирования
	- git rm --cached . -f -r															- удалить все из индексирования
	
	- git -mv file1.txt file2.txt														- git поймет как переименование. Эквивалентно ~/mv, git rm, git add;
	
	- git log																				- получить список истории (логов)
		- git log -p																		- показывает разницу внесенную каждым коммитом
		- git log -p -2																	- пред. + вывести 2 последних коммита
		- git log --pretty=oneline														- вывести список коммитов по одной строке
		- git log --pretty=oneline --max-count=3									- вывести из истории последние 3 значения по одной строке
		- git log --pretty=oneline --all												- вывести все значения истории (так как обычный git log может выводить не все)
		- git log --pretty=oneline --author="first_name last_name"			- вывести коммиты по автору
		- git log --pretty=format:"%h - %s : %ad [%an]"							- вывод в фомате, где %h- короткая версия хэша, %s- название коммита, %ad- дата, %an- автор
		- git log --pretty=format:"%h - %s : %ad [%an] %d" --date="short"	- --data="short", форматирует дату в короткую форму. %d- выводит в конце первой строки название ветки